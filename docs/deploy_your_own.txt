== How to deploy your own instance

This document tries to describe how to deploy your own instance of apptranslator.
I don't claim it's comprehensive, some reading of the code might be required.

== Things to understand

There are few big picture things you need to understand about AppTranslator.

1. AppTranslator is designed to be automated.

For that reason there is no UI for adding strings for translation - I assume
that strings are extracted from source code by a script and uploaded to the
server.

Another script must download translations from the server and do whatever is
needed for the app.

2. User (translator) authentication is via Twitter

I didn't want to maintain yet another signup system so user authentication
is OAuth via Twitter.

For that reason you'll need to get your own Twitter OAuth credentials (dev.twitter.com)
and put them in config.json

It's OAuth so it should be relatively easy to add/change to other OAuth provider
(Google? Facebook?) if you desire. See handler_login.go

3. Data is backed up to s3

For that reason you need to put your s3 access and secret keys, define which
bucket and which subdirectory in that backet will be used for backups (in
config.json)

If you don't provide those, backups will be disabled (see the end of main.go).

4. This is a no-database system

Data is not stored in a database but has it's own simple storage system, with
data stored in a directory on disk. This is for simpler deployment and easy
backup.

5. The system is optimized for C-style printf strings

This is because it was build around SumatraPDF needs and that's what SumatraPDF
uses.

It's mostly agnostic towards what it translates but I've added a client-side
check (canSubmitTranslation() in static/js/apptranslator.js) which verifies
that order of printf-formating directives (%s, %d etc.) is the same in the
translation as in original string.

If you translate other kinds of strings, you can disable or modify that check.

== Uploading strings for translation

Strings must be uploaded to the server as POST application/x-wwww-form-urlencoded
to /uploadstrings url, where "app" argument is the name of the app (as configured
in Apps array in Name field in config.json), "secret" must be UploadSecret and
"strings" is strings to be uploaded. You can see how it works in Sumatra:
https://code.google.com/p/sumatrapdf/source/browse/trunk/scripts/apptransul.py

Strings are utf-8, separated by '\n', where first line is "AppTranslator strings".
It's not required but I sort them to avoid uploading if they haven't changed.
You can see how exactly they look in Sumatra:
https://code.google.com/p/sumatrapdf/source/browse/trunk/strings/last_uploaded.txt

Since '\n' is used as a separator, if you want to translate multi-line strings,
you have to add some escaping for '\n'.

For simplicity, the upload is not incremental. There is no notion of adding or
deleting strings - you upload all strings you want to be translated.

Data (i.e. translations) is never lost. AppTranslator will automatically "obsolete"
strings that were uploaded in the past but haven't been uploaded in the lastest
upload by not showing them in the ui. However, if "obsolete" strings is re-uploaded,
the old translations will show up.

Where do the strings come from? It's up to you. In Sumatra's case, we mark
strings to be translated with _TR("") macro in C++ code and python script extracts
them from sources.

== Downloading strings from the server

You download translations via GET /dltrans?app=${appName}&sha1=${sha1OfLastDownload}

You can see how Sumatra does it:
https://code.google.com/p/sumatrapdf/source/browse/trunk/scripts/apptransdl.py
and how the result looks like:
https://code.google.com/p/sumatrapdf/source/browse/trunk/strings/translations.txt

sha1 is for optimization i.e. to avoid downloading translations if they haven't
changed.

The sha1 is returned as the second line of the result. If you remember it
and submit as sha1 argument, the server will return "No change\n" if there
were no new translations. This conserves the bandwidth.

What do you do with the translations? It's up to you. In Sumatra's case, we
have a home-grown translation system where we generate source file
Translations_txt.cpp which is hooked up to afore-mentioned _TR("") macro. It's
very simple, feel free to steal that idea.

== Adding/removing languages

Modify langs.go

== Deploying the server

This project uses godep for managing dependencies, so first install it with:
go get github.com/tools/godep

Personally I deploy to Ubuntu server, running under specific user, running on
port :5000 (-port cmd-line arg), behind nginx (see script/nginx.conf).

The app expects a specific layout of directories. On my server it's under www
directory and looks like:
data/ - this is where the data of the app lives, one directory for each
        configured app
app/current - this is where the executable and other files like static, tmpl,
              config.json are

Why app/current and not just app? This is for my safe deployment scheme.

I've automated all the steps for deploying a new version using Fabric (a python
deployment tool), see fabfile.py. You can easily modify it for your own needs.

== Configuring AppTranslator

There is some functionality that requires your own config. They must be stored
in config.json file which looks like this:

{
	"Apps" : [{
	    "Name":"SumatraPDF",
	    "Url":"http://blog.kowalczyk.info/software/sumatrapdf",
	    "DataDir":"SumatraPDF",
	    "AdminTwitterUser":"kjk",
	    "UploadSecret":"**secret**"
	}],
    "TwitterOAuthCredentials": {
        "Token":"**secret**",
        "Secret":"**secret**"
    },
    "CookieAuthKeyHexStr":"**secret**",
    "CookieEncrKeyHexStr":"**secret**",
    "AwsAccess":"**secret**",
    "AwsSecret":"**secret**",
    "S3BackupBucket":"kjkbackup",
    "S3BackupDir":"/apptranslator"
}

The Apps part is just a definition of the applications/projects you need
translated.

AdminTwitterUser is twitter handle of the person managing the server (i.e. you).
This user is considered an admin and has some super-powers like viewing logs
via /logs url.

UploadSecret is so that you can protect strings upload from abuse.

TwitterOAuthCredentials are for OAuth via Twitter and you can get them
from http://dev.twitter.com

Cookie*KeyHexStr is for encrypting cookies by securecookie module. It's a random,
32-byte, hex-encoded number. If they are not valid, the code will helpfully
generate a new value for you (see readConfig() in main.go).

AwsAcess/AwsSecret is for s3 backup, along with S3BackupBucket and S3BackupDir.
If not provided, s3 backups will be disabled.

== More questions?

I'm happy to help (kkowalczyk@gmail.com) but only if you've done your homework.

Don't expect an answer if it's already answered in this document or after a
little bit of reading the code.
